// BTW it is not possible to mix call rule with some other.

par __THREAD_POOL_N : int;

__thread_pool_lock : int; // -1 if unlocked, $tid if locked by thread $tid
__thread_pool_selected [ __THREAD_POOL_N ]

init	forall i : int[0, __THREAD_POOL_N - 1]

instances __thread_pool_routine [ __THREAD_POOL_N ], main[1];



__thread_pool_routine {
	initial s_idle;

	s_idle      -> s_running_1 { __thread_poll_selected[tid] = 1  && havoc() }
	s_idle      -> s_running_2 { __thread_poll_selected[tid] = 2  && havoc() }
	s_idle      -> s_running_3 { __thread_poll_selected[tid] = 3  && havoc() }

	s_running_1 -> s_stopped { thread_start_routine_1() && havoc() }
	s_running_2 -> s_stopped { thread_start_routine_2() && havoc() }
	s_running_3 -> s_stopped { thread_start_routine_3() && havoc() }

	s_stopped   -> s_idle      { __thread_poll_selected'[tid] = 0 &&
	                             havoc(__thread_poll_selected)        }
}


// Functions which can be used as thread main ( see pthread_create(3))

thread_start_routine_1 {

}

thread_start_routine_2 {

}

thread_start_routine_3 {

}

__thread_create {
	in function_id : int;
	initial si;
	final   sf;
	err     se;
	
	thread_id : int;

	si -> s_locked { __thread_pool_lock  = 0     &&
	                 __thread_pool_lock' = ( 1 + tid )    &&
	                 thread_id'          = 0      &&
	                 havoc ( __thread_pool_lock, thread_id )
	}
	
	// Is 'thread_id' thread empty? If so, use it
	s_locked -> s_id {
		__thread_pool_selected  [ thread_id ] = 0           &&
		__thread_pool_selected' [ thread_id ] = ( 1 + function_id ) &&
		havoc ( __thread_selected )
	}
	
	// If not so, try another thread
	s_locked -> s_locked {
		__thread_pool_selected [ thread_id ] > 0  &&
		thread_id < __THREAD_POOL_N - 1           &&
		thread_id' = ( thread_id + 1 )            &&
		havoc ( thread_id )
	}
	
	// Can not find anything
	s_locked -> se {
		__thread_pool_selected [ thread_id ] > 0  &&
		thread_id >= __THREAD_POOL_N - 1          &&
		havoc()
	}
	
	// unlock
	s_id -> s_f { __thread_pool_lock' = 0 && havoc() }
}

